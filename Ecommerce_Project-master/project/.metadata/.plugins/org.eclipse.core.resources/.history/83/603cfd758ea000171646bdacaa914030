package com.ecommerce1;

 
import java.security.Principal;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.ecommerce2.ecommercebackend.Dao.AddressDao;
import com.ecommerce2.ecommercebackend.Dao.CartDao;
import com.ecommerce2.ecommercebackend.Dao.CartItemDao;
import com.ecommerce2.ecommercebackend.Dao.OrderDao;
import com.ecommerce2.ecommercebackend.Dao.ProductDao;
import com.ecommerce2.ecommercebackend.Dao.UserDao;
import com.ecommerce2.ecommercebackend.model.Address;
import com.ecommerce2.ecommercebackend.model.Cart;
import com.ecommerce2.ecommercebackend.model.CartItem;
import com.ecommerce2.ecommercebackend.model.Order;
import com.ecommerce2.ecommercebackend.model.Product;
import com.ecommerce2.ecommercebackend.model.User;

@Controller
@RequestMapping("/user")
public class UserController {
	@Autowired
	UserDao userDao;
	@Autowired
	CartDao cartDao;
	@Autowired
	ProductDao productDao;
	@Autowired
	CartItemDao cartItemDao;
	@Autowired
	AddressDao addrDao;
	@Autowired
	OrderDao orderDao;
	@Autowired
	HttpServletRequest request;
@RequestMapping("/login1")
public ModelAndView login(){
	ModelAndView model = new ModelAndView("login");
	return model;
}

@RequestMapping("/addCart/{id}")
public String addCart(@PathVariable("id") int id,Principal principal,ModelMap model){
	principal = request.getUserPrincipal();
/*	 if(principal != null){*/
		
		User user = userDao.getByUserName(principal.getName());
		Cart cart = user.getCart();
		CartItem cartItem = new CartItem();
		Product product = productDao.getbyId(id);
		boolean flag =true;
		for(CartItem cartitem : cart.getCartItem()){
			 cartItem=cartitem ;
			if(cartItem.getProduct().getProductId() == product.getProductId()){
				
				flag = false;
				break;
			}
		}
		if(flag==true){
			//Product product = productDao.getbyId(id);
			
			cartItem.setCart(cart);
			cartItem.setProduct(product);
			cartItem.setOrderQty(1);
			cartItem.setTotalPrice(cartItem.getOrderQty()*product.getProduct_price());
			cart.setTotalItems(cart.getTotalItems()+1);
			cart.setTotalPrice(cart.getTotalPrice()+product.getProduct_price());
			cartItemDao.insert(cartItem);
			cartDao.updateItem(cart);
			
			
			
		}else{
			//Product product = productDao.getbyId(id);
			cartItem.setOrderQty(cartItem.getOrderQty()+1);
			cartItem.setTotalPrice(cartItem.getTotalPrice()+product.getProduct_price());
			cartItemDao.update(cartItem);
			cart.setTotalItems(cart.getTotalItems()+1);
			cart.setTotalPrice(cart.getTotalPrice()+product.getProduct_price());
			cartDao.updateItem(cart);
		}
	 
		return "cart";
	 
}
@RequestMapping("/view/cart")
public ModelAndView viewCart(Principal principal){

		principal = request.getUserPrincipal();
		User user = userDao.getByUserName(principal.getName());
		Cart cart = user.getCart();
		ModelAndView model = new ModelAndView("cart");
		Set<CartItem> list = cart.getCartItem();
		 
			model.addObject("listCart", list);
			model.addObject("username", user.getUserName());
			model.addObject("totalItems", cart.getTotalItems());
			model.addObject("totalPrice", cart.getTotalPrice());
		 
			 
		return model;
	
}
@RequestMapping("/checkout")
public ModelAndView checkOut(@RequestParam(value="setAddress",required=false) String setAddress,Principal principal){
	principal = request.getUserPrincipal();
	User user = userDao.getByUserName(principal.getName());
	List<Address> address = addrDao.getByUser(user.getUserId());
	
	
	ModelAndView model = new ModelAndView("address");
	if(address.size()==0){
		 
		model.addObject("addrList", "No Shipping Address Available...Plzz Add new Shipping Address");
		
	}else{
		model.addObject("addrList1", address);
	}
	model.addObject("address", new Address());
	return model;
	
	
}
@PostMapping("/addAddress")
public String addAddress(@ModelAttribute("address") Address addr, ModelMap model){
	Principal principal = request.getUserPrincipal();
	User user = userDao.getByUserName(principal.getName());
	addr.setUser(user);
	addrDao.insertAddress(addr);
	return "redirect:/user/checkout";
}

@GetMapping("/placeOrder/{id}")
public String orderPlace(@PathVariable("id") int id){
	Principal principal = request.getUserPrincipal();
	User user = userDao.getByUserName(principal.getName());
	Address addr= addrDao.getById(id);
	Order order = new Order();
	Cart cart = user.getCart();
	Set<CartItem> list= cart.getCartItem();
	for(CartItem i : list){
		order.setOrderQty(i.getOrderQty());
		order.setTotalPrice(i.getTotalPrice());
		order.setProduct(i.getProduct());
		order.setAddress(addr.getShippingAddress());
		order.setUser(user);
		orderDao.insert(order);
	}
	 List<Order> orderList = orderDao.getByUser(user.getUserId());
	 return "redirect:/";
	
}
 
}
